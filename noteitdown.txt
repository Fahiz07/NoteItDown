index.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Note It Down</title>
  <link href="https://fonts.googleapis.com/css?family=McLaren|Montserrat&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div id="root"></div>
  <script src="../src/index.js" type="text/jsx"></script>
  <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
</body>
</html>





styles.css

* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}
html {
  font-family: "Montserrat", sans-serif;
}
body {
  background: #eee;
  background-image: url("https://www.transparenttextures.com/patterns/cubes.png");
  padding: 0 16px;
}

header {
  background-color: #f5ba13;
  margin: auto -16px;
  padding: 16px 32px;
  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.3);
}

header h1 {
  color: #fff;
  font-family: "McLaren", cursive;
  font-weight: 200;
}

footer {
  position: fixed;
  left:0;
  bottom:0;
  right:0;
  padding: auto;
  text-align: center;
  width: 100%;
  height: 1.5rem;
}

footer p {
  color: #ccc;
}
.note {
  position: relative;
  background: #fff;
  border-radius: 7px;
  box-shadow: 0 2px 5px #ccc;
  padding: 10px;
  width: 240px;
  margin: 16px;
  float: left;
}
.note h1 {
  font-size: 1.1em;
  margin-bottom: 6px;
}
.note p {
  font-size: 1.1em;
  margin-bottom: 10px;
  white-space: pre-wrap;
  word-wrap: break-word;
}
#date {
  position: absolute;
  bottom: 0;
  font-size: 10px;
  color: gray;
}

.note button {
  position: relative;
  float: right;
  margin-right: 10px;
  color: #f5ba13;
  border: none;
  width: 36px;
  height: 36px;
  cursor: pointer;
  outline: none;
}

form.create-note {
  position: relative;
  width: 480px;
  margin: 30px auto 20px auto;
  background: #fff;
  padding: 15px;
  border-radius: 7px;
  box-shadow: 0 1px 5px rgb(138, 137, 137);
}
form.create-note input,
form.create-note textarea {
  width: 100%;
  border: none;
  padding: 4px;
  outline: none;
  font-size: 1.2em;
  font-family: inherit;
  resize: none;
}
form.create-note button {
  position: absolute;
  right: 18px;
  bottom: -18px;
  background: #f5ba13;
  color: #fff;
  border: none;
  border-radius: 50%;
  width: 36px;
  height: 36px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
  cursor: pointer;
  outline: none;
}






index.js (client)

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './components/App';
import "bootstrap/dist/css/bootstrap.min.css";

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


App.js

import React, { useState, useEffect, useCallback } from "react";
import Header from "./Header";
import Footer from "./Footer";
import CreateArea from "./CreateArea";
import Note from "./Note";
import EditModal from "./EditModal";

function App() {
  const [notes, setNotes] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [currentNote, setCurrentNote] = useState({
    note_id: null,
    note_title: "",
    note_content: "",
  });

  const fetchNotes = useCallback(async () => {
    try {
      const response = await fetch("http://localhost:5000/notes");
      const jsonData = await response.json();
      setNotes(jsonData);
    } catch (err) {
      console.error(err.message);
    }
  }, []);

  useEffect(() => {
    fetchNotes();
  }, [fetchNotes]);

  const deleteNote = async (note_id) => {
    try {
      await fetch(`http://localhost:5000/notes/${note_id}`, {
        method: "DELETE",
      });
      setNotes((prevNotes) => prevNotes.filter((noteItem) => noteItem.note_id !== note_id));
    } catch (err) {
      console.error(err.message);
    }
  };

  const editNote = async (note_id, updatedNote) => {
    try {
      const response = await fetch(`http://localhost:5000/notes/${note_id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(updatedNote),
      });
      if (response.ok) {
        setNotes((prevNotes) =>
          prevNotes.map((noteItem) =>
            noteItem.note_id === note_id ? { ...noteItem, ...updatedNote } : noteItem
          )
        );
        setShowModal(false);
      } else {
        console.error("Failed to update note.");
      }
    } catch (err) {
      console.error(err.message);
    }
  };

  const handleEditClick = (note, note_id) => {
    setCurrentNote({
      note_id,
      note_title: note.note_title,
      note_content: note.note_content,
    });
    setShowModal(true);
  };

  return (
    <div >
      <Header />
        <CreateArea fetchNotes={fetchNotes} />
        {notes.map((noteItem) => (
          <Note
            key={noteItem.note_id}
            note_id={noteItem.note_id}
            note_title={noteItem.note_title}
            note_content={noteItem.note_content}
            onDelete={deleteNote}
            onEdit={handleEditClick}
          />
        ))}
      <Footer />
      <EditModal
        show={showModal}
        note={currentNote}
        onHide={() => setShowModal(false)}
        onSave={editNote}
      />
    </div>
  );
}

export default App;




CreateArea.js

import React, { useState } from "react";
import AddIcon from "@mui/icons-material/Add";
import Fab from "@mui/material/Fab";
import Zoom from "@mui/material/Zoom";

function CreateArea({ fetchNotes }) {
  const [isExpanded, setExpanded] = useState(false);
  const [note, setNote] = useState({
    note_title: "",
    note_content: "",
  });

  const handleChange = (event) => {
    const { name, value } = event.target;
    setNote((prevNote) => ({
      ...prevNote,
      [name]: value,
    }));
  };

  const submitNote = async (e) => {
    e.preventDefault();
    try {
      await fetch("http://localhost:5000/notes", {
        method: "POST",
        headers: { "content-type": "application/json" },
        body: JSON.stringify(note),
      });
      setNote({
        note_title: "",
        note_content: "",
      });
      fetchNotes();
    } catch (err) {
      console.error(err.message);
    }
  };

  return (
    <div>
      <form className="create-note">
        {isExpanded && (
          <input
            name="note_title"
            onChange={handleChange}
            value={note.note_title}
            placeholder="Title"
          />
        )}
        <textarea
          name="note_content"
          onClick={() => setExpanded(true)}
          onChange={handleChange}
          value={note.note_content}
          placeholder="Take a note..."
          rows={isExpanded ? 3 : 1}
        />
        <Zoom in={isExpanded}>
          <Fab onClick={submitNote}>
            <AddIcon />
          </Fab>
        </Zoom>
      </form>
    </div>
  );
}

export default CreateArea;




EditModal.js

import React, { useState, useEffect } from "react";
import { Modal, Button, Form } from "react-bootstrap";

function EditModal(props) {
  const [note, setNote] = useState(props.note);

  useEffect(() => {
    setNote(props.note);
  }, [props.note]);

  function handleChange(event) {
    const { name, value } = event.target;
    setNote((prevNote) => ({
      ...prevNote,
      [name]: value,
    }));
  }

  const handleSave = () => {
    props.onSave(note.note_id, {
      note_title: note.note_title,
      note_content: note.note_content,
    });
  };

  return (
    <Modal show={props.show} onHide={props.onHide}>
      <Modal.Header closeButton>
        <Modal.Title>Edit Note</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Form>
          <Form.Group controlId="formTitle">
            <Form.Label>Title</Form.Label>
            <Form.Control
              type="text"
              name="note_title"
              value={note.note_title}
              onChange={handleChange}
            />
          </Form.Group>
          <Form.Group controlId="formContent">
            <Form.Label>Content</Form.Label>
            <Form.Control
              as="textarea"
              rows={3}
              name="note_content"
              value={note.note_content}
              onChange={handleChange}
            />
          </Form.Group>
        </Form>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="secondary" onClick={props.onHide}>
          Close
        </Button>
        <Button variant="primary" onClick={handleSave}>
          Save Changes
        </Button>
      </Modal.Footer>
    </Modal>
  );
}

export default EditModal;



Footer.js

import React from "react";

function Footer() {
  const year = new Date().getFullYear();
  return (
    <footer>
      <p>Copyright â“’ {year}</p>
    </footer>
  );
}

export default Footer;




Header.js

import React from "react";
import HighlightIcon from "@mui/icons-material/Highlight";


function Header() {
  return (
    <header>
      <h1>
        <HighlightIcon />
        Note It Down
      </h1>
    </header>
  );
}

export default Header;



Note.js

import React from "react";
import DeleteIcon from "@mui/icons-material/Delete";
import EditIcon from "@mui/icons-material/Edit";


function Note(props) {
  
  function handleDelete() {
    props.onDelete(props.note_id);
  }

  function handleEdit() {
    props.onEdit({ note_title: props.note_title, note_content: props.note_content }, props.note_id);
  }

  return (
    <div className="note">
      <h1>{props.note_title}</h1>
      <p>{props.note_content}</p>
      <button onClick={handleEdit}>
        <EditIcon />
      </button>
      <button onClick={handleDelete}>
        <DeleteIcon />
      </button>
    </div>
  );
}

export default Note;



index.js (server)

import express from "express";
import cors from "cors";
import pkg from 'pg';
import dotenv from 'dotenv';

dotenv.config();

const { Pool } = pkg;

const app = express();
app.use(cors());
app.use(express.json());

const pool = new Pool({
  user: process.env.DATABASE_USER,
  host: process.env.DATABASE_HOST,
  database: process.env.DATABASE_NAME,
  password: process.env.DATABASE_PASSWORD,
  port: process.env.DATABASE_PORT,
});

app.post("/notes", async (req, res) => {
  try {
    const { note_title, note_content } = req.body;
    const newNote = await pool.query(
      "INSERT INTO notes (note_title, note_content) VALUES ($1, $2) RETURNING *",
      [note_title, note_content]
    );
    res.json(newNote.rows[0]);
  } catch (err) {
    console.error(err.message);
    res.status(500).json({ error: "Failed to add note." });
  }
});

app.get("/notes", async (req, res) => {
  try {
    const allNotes = await pool.query("SELECT * FROM notes ORDER BY note_id DESC");
    res.json(allNotes.rows);
  } catch (err) {
    console.error(err.message);
    res.status(500).json({ error: "Failed to retrieve notes." });
  }
});

app.put("/notes/:note_id", async (req, res) => {
  try {
    const { note_id } = req.params;
    const { note_title, note_content } = req.body;
    await pool.query(
      "UPDATE notes SET note_title = $1, note_content = $2 WHERE note_id = $3",
      [note_title, note_content, note_id]
    );
    res.json({ message: "Note updated successfully" });
  } catch (err) {
    console.error(err.message);
    res.status(500).json({ error: "Failed to update note." });
  }
});

app.delete("/notes/:note_id", async (req, res) => {
  try {
    const { note_id } = req.params;
    await pool.query("DELETE FROM notes WHERE note_id = $1", [note_id]);
    res.json({ message: "Note deleted successfully" });
  } catch (err) {
    console.error(err.message);
    res.status(500).json({ error: "Failed to delete note." });
  }
});

app.listen(5000, () => {
  console.log("Server is running on port 5000");
});



package.json (server)

{
  "name": "server",
  "version": "1.0.0",
  "description": "Notes Website",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Fahiz",
  "license": "ISC",
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.19.2",
    "pg": "^8.12.0"
  }
}

package.json (client)

{
  "name": "client",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.11.4",
    "@emotion/styled": "^11.11.5",
    "@mui/icons-material": "^5.15.21",
    "@mui/material": "^5.15.21",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "bootstrap": "^5.3.0",
    "react": "^18.3.1",
    "react-bootstrap": "^2.8.0",
    "react-dom": "^18.3.1",
    "react-is": "^18.3.1",
    "uuid": "^9.0.0",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/plugin-transform-private-property-in-object": "^7.24.7",
    "babel-preset-react-app": "^10.0.1",
    "typescript": "3.3.3"
  }
}

.env
DATABASE_USER=postgres
DATABASE_PASSWORD=database
DATABASE_HOST=localhost
DATABASE_PORT=5432
DATABASE_NAME=NoteItDown
